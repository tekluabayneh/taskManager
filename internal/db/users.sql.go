// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email)
VALUES ($1, $2)
RETURNING id, name, email
`

type CreateUserParams struct {
	Name  string
	Email string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users WHERE id = $1
RETURNING id, name, email
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email FROM users
`

func (q *Queries) GetUser(ctx context.Context) (User, error) {
	row := q.db.QueryRow(ctx, getUser)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const getsingleUser = `-- name: GetsingleUser :one
SELECT id, name, email FROM users WHERE id = $1
`

func (q *Queries) GetsingleUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getsingleUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET name = $1, email = $2 WHERE id = $3
RETURNING id, name, email
`

type UpdateUserParams struct {
	Name  string
	Email string
	ID    int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Name, arg.Email, arg.ID)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}
