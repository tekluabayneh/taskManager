// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: Tasks.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks(title, description, status, user_id)
VALUES ($1, $2, $3, $4)
RETURNING id, title, description, status, user_id
`

type CreateTaskParams struct {
	Title       string
	Description pgtype.Text
	Status      pgtype.Text
	UserID      pgtype.Int4
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.UserID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.UserID,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :one
DELETE  FROM tasks WHERE id = $1 
RETURNING id, title, description, status, user_id
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRow(ctx, deleteTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.UserID,
	)
	return i, err
}

const getSingTask = `-- name: GetSingTask :one
SELECT id, title, description, status, user_id from tasks WHERE id = $1
`

func (q *Queries) GetSingTask(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRow(ctx, getSingTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.UserID,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT id, title, description, status, user_id FROM tasks
`

func (q *Queries) GetTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks SET title = $1, description = $2, status = $3 WHERE id = $4
RETURNING id, title, description, status, user_id
`

type UpdateTaskParams struct {
	Title       string
	Description pgtype.Text
	Status      pgtype.Text
	ID          int32
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.ID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.UserID,
	)
	return i, err
}
